description: >
  Install AWS CLI, if needed, and configure. Log into Amazon ECR and push image
  to repository. Requires environment variables for AWS_ACCESS_KEY_ID and
  AWS_SECRET_ACCESS_KEY. We recommend these be saved in a Project
  (https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project)
  or in Contexts (https://circleci.com/docs/2.0/contexts).
executor: << parameters.executor >>
parameters:
  attach-workspace:
    default: false
    description: >
      Boolean for whether or not to attach to an existing workspace. Default is
      false.
    type: boolean
  aws-access-key-id:
    default: AWS_ACCESS_KEY_ID
    description: >
      AWS access key id for IAM role. Set this to the name of the environment
      variable you will set to hold this value, i.e. AWS_ACCESS_KEY_ID.
    type: env_var_name
  aws-cli-version:
    default: latest
    description: >-
      Select a specific version of the AWS v2 CLI. By default the latest version
      will be used.
    type: string
  aws-secret-access-key:
    default: AWS_SECRET_ACCESS_KEY
    description: >
      AWS secret key for IAM role. Set this to the name of the environment
      variable you will set to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
    type: env_var_name
  create-repo:
    default: false
    description: Should the repo be created if it does not exist?
    type: boolean
  docker-login:
    default: false
    description: |
      Enable dockerhub authentication. Defaults to false.
    type: boolean
  dockerfile:
    default: Dockerfile
    description: Name of dockerfile to use. Defaults to Dockerfile.
    type: string
  dockerhub-password:
    default: DOCKERHUB_PASSWORD
    description: >
      Dockerhub password to be configured. Set this to the name of the
      environment variable you will set to hold this value, i.e.
      DOCKERHUB_PASSWORD.
    type: env_var_name
  dockerhub-username:
    default: DOCKERHUB_USERNAME
    description: >
      Dockerhub username to be configured. Set this to the name of the
      environment variable you will set to hold this value, i.e.
      DOCKERHUB_USERNAME.
    type: env_var_name
  executor:
    default: default
    description: |
      Executor to use for this job.
    type: executor
  extra-build-args:
    default: ''
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
    type: string
  new-profile-name:
    default: ''
    description: Name of new profile associated with role arn.
    type: string
  no-output-timeout:
    default: 10m
    description: >
      The amount of time to allow the docker build command to run before timing
      out. Defaults to '10m'
    type: string
  path:
    default: .
    description: >-
      Path to the directory containing your Dockerfile and build context.
      Defaults to . (working directory).
    type: string
  platform:
    default: linux/amd64
    description: >-
      Platform targets for the docker image, multi arch images. Ex.
      linux/amd64,linux/arm64
    type: string
  profile-name:
    default: default
    description: AWS profile name to be configured.
    type: string
  public-registry:
    default: false
    description: >
      Set to true if building and pushing an image to a Public Registry on ECR.
    type: boolean
  push-image:
    default: true
    description: >-
      Set to false to build an image without pushing to repository.  Defaults to
      true.
    type: boolean
  region:
    default: '${AWS_REGION}'
    description: >
      AWS region of ECR repository. Defaults to environment variable
      ${AWS_REGION}
    type: string
  registry-id:
    default: AWS_ECR_REGISTRY_ID
    description: >
      The 12 digit AWS id associated with the ECR account. This field is
      required
    type: env_var_name
  remote-docker-layer-caching:
    default: false
    description: >
      Enable Docker layer caching if using remote Docker engine. Requires
      setup-remote-docker to be set to true. Defaults to false.
    type: boolean
  remote-docker-version:
    default: 19.03.13
    description: Specific remote docker version
    type: string
  repo:
    description: Name of an Amazon ECR repository
    type: string
  repo-scan-on-push:
    default: true
    description: Should the created repo be security scanned on push?
    type: boolean
  role-arn:
    default: ''
    description: Role ARN that the profile should take.
    type: string
  setup-remote-docker:
    default: false
    description: >
      Setup and use CircleCI's remote Docker environment for Docker and
      docker-compose commands? Not required if using the default executor
    type: boolean
  skip-when-tags-exist:
    default: false
    description: >
      Whether to skip image building if all specified tags already exist in ECR
    type: boolean
  source-profile:
    default: default
    description: >
      Source profile containing credentials to assume the role with role-arn.
    type: string
  tag:
    default: latest
    description: >-
      A comma-separated string containing docker image tags to build and push
      (default = latest)
    type: string
  workspace-root:
    default: .
    description: >
      Workspace root path that is either an absolute path or a path relative to
      the working directory. Defaults to '.' (the working directory)
    type: string
steps:
  - checkout
  - when:
      condition: <<parameters.attach-workspace>>
      steps:
        - attach_workspace:
            at: <<parameters.workspace-root>>
  - when:
      condition:
        and:
          - <<parameters.remote-docker-layer-caching>>
          - not: <<parameters.setup-remote-docker>>
      steps:
        - run: >-
            echo "Docker Layer Caching requires Setup Remote Docker command" &&
            exit 1
  - when:
      condition: <<parameters.setup-remote-docker>>
      steps:
        - aws-ecr/setup_remote_docker:
            docker_layer_caching: <<parameters.remote-docker-layer-caching>>
            version: <<parameters.remote-docker-version>>
  - aws-ecr/ecr-login:
      aws-access-key-id: <<parameters.aws-access-key-id>>
      aws-cli-version: <<parameters.aws-cli-version>>
      aws-secret-access-key: <<parameters.aws-secret-access-key>>
      new-profile-name: <<parameters.new-profile-name>>
      profile-name: <<parameters.profile-name>>
      public-registry: <<parameters.public-registry>>
      region: <<parameters.region>>
      registry-id: <<parameters.registry-id>>
      role-arn: <<parameters.role-arn>>
      source-profile: <<parameters.source-profile>>
  - when:
      condition: <<parameters.create-repo>>
      steps:
        - aws-ecr/create-repo:
            profile-name: <<parameters.profile-name>>
            public-registry: <<parameters.public-registry>>
            region: <<parameters.region>>
            repo: <<parameters.repo>>
            repo-scan-on-push: <<parameters.repo-scan-on-push>>
  - when:
      condition: <<parameters.docker-login>>
      steps:
        - run: >
            docker login -u $<<parameters.dockerhub-username>> -p
            $<<parameters.dockerhub-password>>
  - aws-ecr/build-image:
      dockerfile: <<parameters.dockerfile>>
      extra-build-args: <<parameters.extra-build-args>>
      no-output-timeout: <<parameters.no-output-timeout>>
      path: <<parameters.path>>
      platform: <<parameters.platform>>
      profile-name: <<parameters.profile-name>>
      public-registry: <<parameters.public-registry>>
      push-image: <<parameters.push-image>>
      region: <<parameters.region>>
      registry-id: <<parameters.registry-id>>
      repo: <<parameters.repo>>
      skip-when-tags-exist: <<parameters.skip-when-tags-exist>>
      tag: <<parameters.tag>>
  - store_artifacts:
      path: test.txt
